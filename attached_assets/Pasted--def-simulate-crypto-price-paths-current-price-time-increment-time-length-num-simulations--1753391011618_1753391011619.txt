
def simulate_crypto_price_paths(
    current_price, time_increment, time_length, num_simulations, asset
):
    """
    Simulate multiple crypto asset price paths.
    """

    CURRENT_DAILY_PARAMS = {
        'BTC': {
            # Core volatility and drift
            'daily_sigma': 0.0366,              # 3.66% daily volatility
            'daily_drift': 0.00,              # 0.04% daily expected return (~15% annual)
            # Distribution characteristics
            'skewness': 0.09,                  # Negative skew (crash risk)
            'kurtosis': 1.34,                    # Fat tails (extreme events)
            # Advanced features
            'volatility_clustering': True,
            'min_price': 1000                   # $1k floor price
        },
        
        'ETH': {
            # Core volatility and drift  
            'daily_sigma': 0.0419,              # 4.19% daily volatility
            'daily_drift': 0.0,              # 0.05% daily expected return (~20% annual)
            # Distribution characteristics
            'skewness': -0.2,                  # More negative skew than BTC
            'kurtosis': 4.5,                    # Fatter tails than BTC
            # Advanced features
            'volatility_clustering': True,
            'min_price': 100                    # $100 floor price
        },
        
        'XAU': {
            # Core volatility and drift
            'daily_sigma': 0.0105,              # 1.05% daily volatility
            'daily_drift': 0.00,              # 0.01% daily expected return (~4% annual)
            # Distribution characteristics  
            'skewness': 0.0,                   # Slight positive skew (safe haven flows)
            'kurtosis': 0.5,                    # Slightly fat tails
            # Advanced features
            'volatility_clustering': False,      # Less clustering than crypto
            'min_price': 1000                   # $1000/oz floor
        }
    }

    price_paths = []
    for _ in range(num_simulations):
        price_path = simulate_single_price_path_daily(
            current_price, time_increment, time_length, **CURRENT_DAILY_PARAMS[asset]
        )
        price_paths.append(price_path)

    return np.array(price_paths)


def simulate_single_price_path_daily(
    current_price, 
    time_increment, 
    time_length, 
    daily_sigma,                    # DAILY volatility (not annual)
    daily_drift=0.0,               # Expected DAILY return
    skewness=0.0,                  # Distribution skewness
    kurtosis=3.0,                  # Distribution kurtosis
    volatility_clustering=False,   # GARCH-like volatility
    min_price=0.01                 # Price floor
):
    """
    Simulate price path using DAILY parameters (no mean reversion, no jumps).
    
    Parameters:
    -----------
    daily_sigma : float
        Daily volatility (e.g., 0.037 for 3.7% daily volatility)
    daily_drift : float  
        Expected daily return (e.g., 0.001 for 0.1% daily)
    """
    
    # Time calculations
    one_day = 86400  # seconds in a day
    dt = time_increment / one_day  # Time step as fraction of day
    num_steps = int(time_length / time_increment)
    
    # Initialize arrays
    prices = np.zeros(num_steps + 1)
    prices[0] = current_price
    volatilities = np.full(num_steps, daily_sigma)
    
    # Generate random numbers
    if abs(skewness) > 0.1 or abs(kurtosis - 3) > 0.5:
        random_nums = generate_skewed_kurtotic_random(num_steps, skewness, kurtosis)
    else:
        random_nums = np.random.normal(0, 1, size=num_steps)
    
    # Main simulation loop
    for i in range(num_steps):
        current_vol = volatilities[i]
        # 1. Base return with daily drift and volatility
        drift_component = daily_drift * dt
        vol_component = current_vol * np.sqrt(dt) * random_nums[i]
        total_return = drift_component + vol_component
        # 2. Update price
        new_price = prices[i] * (1 + total_return)
        prices[i + 1] = max(new_price, min_price)
        # 3. Update volatility (daily clustering)
        if volatility_clustering and i < num_steps - 1:
            volatilities[i + 1] = update_volatility_garch_daily(
                current_vol, total_return, daily_sigma
            )
    
    return prices

def generate_skewed_kurtotic_random(size, skewness, kurtosis):
    """Generate random numbers with skewness and kurtosis"""
    if abs(skewness) > 0.1:
        return skewnorm.rvs(a=skewness, size=size)
    elif kurtosis > 4:
        df = 4 + 6 / max(kurtosis - 3, 0.1)
        return t.rvs(df=df, size=size)
    else:
        return np.random.normal(0, 1, size=size)

def update_volatility_garch_daily(current_vol, recent_return, base_vol, alpha=0.1, beta=0.85):
    """Update volatility using daily GARCH"""
    omega = base_vol * base_vol * (1 - alpha - beta)
    new_variance = omega + alpha * (recent_return * recent_return) + beta * (current_vol * current_vol)
    return np.sqrt(max(new_variance, 0.001))